// This file was generated by Mendix Modeler 7.8.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package flatfileinterface.proxies.constants;

import com.mendix.core.Core;

public class Constants
{
	// These are the constants for the FlatFileInterface module

	/**
	* Version 6.0.0 of the flatfile interface module
	* 
	* Release notes:
	* 
	* The module was upgraded to be compatible with Mendix 6.10.4
	* 
	* Version 5.5.0 of the flatfile interface module
	* 
	* Release notes:
	* 1) Upgraded Mendix version to 5.18.0
	* 2) Support for decimal attributes
	* 3) Better transaction management, cofigurable in the import definition
	* 4) Console logging can be switched on and off in the configuration
	* 5) Improved logging mechanism
	* 
	* Version 4.3.0 of the flatfile interface module
	* 
	* Dependencies:
	* 1) This module depends on the MxModelReflection module
	* 2) Cloud security will prevent the access to the filesystem, when running in the cloud make sure the policies for the directories used with this module are setup correctly
	* 
	* Setup: 
	* 1) Add the forms in the #Implementation folder to your navigation
	* 2) Add module permissions to a user role in Project --> Security
	* 3) Synchronize objects in the MxModelReflection module
	* 4) Setup the configuration
	* 
	* 
	* 
	* 
	* Release notes:
	* Logging to console via after commit.
	* Fix in java create logMessage crashed (getContext() in stead of newContext) occurs when loglevel is set to info.
	* Added import/export via xml.
	* Added reset function to file queue
	* Renamed microflows with execution prefix
	* Fixed typo in filetype enumeration
	* Fixed issue with double quote text qualifier
	* 
	* 
	* 
	* Version 4.3.2 of the FFI module includes:
	* 1) Compatible with Mendix 5.9.1
	* 2) Change in InterfaceDefinition form due to upgrade to Mx 5, you should not notice the difference when upgrading (Data will be preserved)
	* 
	* Version 4.2.0 of the FFI module includes:
	* 1) Fix for column definition order issue, when rearranging the defined columns the new order was not picked up when importing
	* 2) Feature added to add columns to be skipped easily
	* 3) Added file encoding option to read multibyte characters
	* 
	* 
	* Version 4.1.2 of the FFI module includes:
	* 1) Performance fix for cleanup of queued files this could lead to memory issues
	* 2) Performance fix for cleanup logging this cluld lead to memeor issues
	* 
	* Version 4.1.01 of the FFI module includes
	* 
	* 1) Stongly improved memory usage
	* 2) Highly improved performance
	* 3) No need for intermediate objects
	* 
	* Release notes:
	* Version 4.0 of the FFI module includes
	* 
	* 1) Optimization for memory usage for reading large files was implemented by the implementation of transaction management in the jav code.
	* 2) New constants introduced that govern the commit size of the batch processing, the large the size the more memory is used. Change the commit size when having performance issues, but be aware that too large batch sizes might lead to heap space issues and have a nagative impact on performance
	* 3) Saver handling of file handles in the java code.
	* 4) Small validation error fixed when setting up cofigurations using queued files.
	* 5) Added extra annotations and logging to javacode
	* 6) Added linenumbers to fixed length logmessages for enhanced error traceability
	* 7) Several textual issues in NL version fixed
	* 
	* Release notes:
	* Version 3.0 of the FFI module includes
	* 
	* 1) Optimization of the performance of the delimited file import
	* 
	* 2) In addition to processing files from directories files stored in your Mendix app can be processed directly by placing the files in the entity ProcessFileQueue.
	* Multiple queues can be created (indicated by an integer). 
	* On the configuration the choice is made for which queue the configuration will process the files. 
	* When files are present in the queue the files will be imported and marked as processed on correct execution of the import. 
	* When an error has occurred the file will have an error flag set to true and will no longer be processed. 
	* The error details are logged in the configuration. 
	* Files will be deleted from the queue with a scheduled event once a day and the maximum age of a processed file is set in the constant FileQueueAge (default is 1 day). Files with errors during processing will remain in the queue.
	* 
	* Version 2.1 of the flatfile interface module.
	* 
	* Dependencies:
	* 1) This module depends on the MxModelReflection module at least  3.0 (18-12-2012)
	* 2) Cloud security will prevent the access to the filesystem, when running in the cloud make sure the policies for the directories used with this module are setup correctly
	* 
	* Setup: 
	* 1) Add the form in the #Implementation folder to your navigation
	* 2) Add module permissions to a user role in Project --> Security
	* 3) Synchronize objects in the MxModelReflection module
	* 4) Setup the configuration
	* 
	* Release notes:
	* Version 2.1  of the FFI module includes:
	* 1) faster create of records by commiting the data in batches, object are no longer comitted to the database 1 by 1 but in one batch, thereby greatly enhancing the performance
	* 2) debug logging for following the create actions for tracebility
	* 3) delete of imported data does no longer trigger events and does not use standard delete behaviour, resulting in improved performance
	* 
	* When upgrading from a previous version please note that the entity Importedline no longer has the LineFinished Boolean attribute as this is no longer needed.
	* The ImportedLine entity no longer uses the events to be processed.
	* 
	* 
	* Version 1.1 of the FFI module includes
	* 1) The option to minimize the logging by setting the log level on the definition to Info or Error. With the Error log level only the errors are being stored in the log, with info level all logging is created.
	* 2) The logging has been expanded to inlcude the line number where the error occurred for faster resolution of issues in large files.
	* 3) All column data is removed after successful conversion, minimizing database growth. Only data that could not be converted remains available in the column entity.
	* 
	* Version 1.0 
	* Intial app store release
	* 
	* Version 0.2.3.2
	* Added option to map boolean fields
	* 
	* Version 0.2.3.1
	* Changed start and end positions for column definition, now by length
	* On adding new columns the start position is determined based on previous column
	* Added up and down function for delimited column definitions
	* Changed layout of forms
	* 
	* Version 0.2.3 :
	* Support for text qualifiers 
	* 
	* Version 0.2.2.01:
	* Currency fields can be mapped
	* Skipping columns is configurable
	* 
	* 
	* 
	*/
	public static java.lang.String getFFI_README_v6_0_0()
	{
		return (java.lang.String)Core.getConfiguration().getConstantValue("FlatFileInterface.FFI_README_v6_0_0");
	}

	/**
	* Number of days that a processed queued file remains in the queue before it is delete from the queue.
	* Default value is: 1
	*/
	public static java.lang.Long getFileQueueAge()
	{
		return (java.lang.Long)Core.getConfiguration().getConstantValue("FlatFileInterface.FileQueueAge");
	}
}