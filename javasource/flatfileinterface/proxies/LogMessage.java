// This file was generated by Mendix Modeler.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package flatfileinterface.proxies;

public class LogMessage
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject logMessageMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "FlatFileInterface.LogMessage";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Message("Message"),
		MessageType("MessageType"),
		StackTrace("StackTrace"),
		LogToConsole("LogToConsole"),
		LogMessage_Log("FlatFileInterface.LogMessage_Log");

		private java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public LogMessage(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, "FlatFileInterface.LogMessage"));
	}

	protected LogMessage(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject logMessageMendixObject)
	{
		if (logMessageMendixObject == null)
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		if (!com.mendix.core.Core.isSubClassOf("FlatFileInterface.LogMessage", logMessageMendixObject.getType()))
			throw new java.lang.IllegalArgumentException("The given object is not a FlatFileInterface.LogMessage");

		this.logMessageMendixObject = logMessageMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'LogMessage.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static flatfileinterface.proxies.LogMessage initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		return flatfileinterface.proxies.LogMessage.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 */
	public static flatfileinterface.proxies.LogMessage initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new flatfileinterface.proxies.LogMessage(context, mendixObject);
	}

	public static flatfileinterface.proxies.LogMessage load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return flatfileinterface.proxies.LogMessage.initialize(context, mendixObject);
	}

	public static java.util.List<flatfileinterface.proxies.LogMessage> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		java.util.List<flatfileinterface.proxies.LogMessage> result = new java.util.ArrayList<flatfileinterface.proxies.LogMessage>();
		for (com.mendix.systemwideinterfaces.core.IMendixObject obj : com.mendix.core.Core.retrieveXPathQuery(context, "//FlatFileInterface.LogMessage" + xpathConstraint))
			result.add(flatfileinterface.proxies.LogMessage.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		com.mendix.core.Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(com.mendix.systemwideinterfaces.core.IContext context)
	{
		com.mendix.core.Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Message
	 */
	public final java.lang.String getMessage()
	{
		return getMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of Message
	 */
	public final java.lang.String getMessage(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Message.toString());
	}

	/**
	 * Set value of Message
	 * @param message
	 */
	public final void setMessage(java.lang.String message)
	{
		setMessage(getContext(), message);
	}

	/**
	 * Set value of Message
	 * @param context
	 * @param message
	 */
	public final void setMessage(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String message)
	{
		getMendixObject().setValue(context, MemberNames.Message.toString(), message);
	}

	/**
	 * Set value of MessageType
	 * @param messagetype
	 */
	public final flatfileinterface.proxies.LogMessageType getMessageType()
	{
		return getMessageType(getContext());
	}

	/**
	 * @param context
	 * @return value of MessageType
	 */
	public final flatfileinterface.proxies.LogMessageType getMessageType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		Object obj = getMendixObject().getValue(context, MemberNames.MessageType.toString());
		if (obj == null)
			return null;

		return flatfileinterface.proxies.LogMessageType.valueOf((java.lang.String) obj);
	}

	/**
	 * Set value of MessageType
	 * @param messagetype
	 */
	public final void setMessageType(flatfileinterface.proxies.LogMessageType messagetype)
	{
		setMessageType(getContext(), messagetype);
	}

	/**
	 * Set value of MessageType
	 * @param context
	 * @param messagetype
	 */
	public final void setMessageType(com.mendix.systemwideinterfaces.core.IContext context, flatfileinterface.proxies.LogMessageType messagetype)
	{
		if (messagetype != null)
			getMendixObject().setValue(context, MemberNames.MessageType.toString(), messagetype.toString());
		else
			getMendixObject().setValue(context, MemberNames.MessageType.toString(), null);
	}

	/**
	 * @return value of StackTrace
	 */
	public final java.lang.String getStackTrace()
	{
		return getStackTrace(getContext());
	}

	/**
	 * @param context
	 * @return value of StackTrace
	 */
	public final java.lang.String getStackTrace(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.StackTrace.toString());
	}

	/**
	 * Set value of StackTrace
	 * @param stacktrace
	 */
	public final void setStackTrace(java.lang.String stacktrace)
	{
		setStackTrace(getContext(), stacktrace);
	}

	/**
	 * Set value of StackTrace
	 * @param context
	 * @param stacktrace
	 */
	public final void setStackTrace(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String stacktrace)
	{
		getMendixObject().setValue(context, MemberNames.StackTrace.toString(), stacktrace);
	}

	/**
	 * @return value of LogToConsole
	 */
	public final java.lang.Boolean getLogToConsole()
	{
		return getLogToConsole(getContext());
	}

	/**
	 * @param context
	 * @return value of LogToConsole
	 */
	public final java.lang.Boolean getLogToConsole(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.LogToConsole.toString());
	}

	/**
	 * Set value of LogToConsole
	 * @param logtoconsole
	 */
	public final void setLogToConsole(java.lang.Boolean logtoconsole)
	{
		setLogToConsole(getContext(), logtoconsole);
	}

	/**
	 * Set value of LogToConsole
	 * @param context
	 * @param logtoconsole
	 */
	public final void setLogToConsole(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean logtoconsole)
	{
		getMendixObject().setValue(context, MemberNames.LogToConsole.toString(), logtoconsole);
	}

	/**
	 * @return value of LogMessage_Log
	 */
	public final flatfileinterface.proxies.Log getLogMessage_Log() throws com.mendix.core.CoreException
	{
		return getLogMessage_Log(getContext());
	}

	/**
	 * @param context
	 * @return value of LogMessage_Log
	 */
	public final flatfileinterface.proxies.Log getLogMessage_Log(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		flatfileinterface.proxies.Log result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.LogMessage_Log.toString());
		if (identifier != null)
			result = flatfileinterface.proxies.Log.load(context, identifier);
		return result;
	}

	/**
	 * Set value of LogMessage_Log
	 * @param logmessage_log
	 */
	public final void setLogMessage_Log(flatfileinterface.proxies.Log logmessage_log)
	{
		setLogMessage_Log(getContext(), logmessage_log);
	}

	/**
	 * Set value of LogMessage_Log
	 * @param context
	 * @param logmessage_log
	 */
	public final void setLogMessage_Log(com.mendix.systemwideinterfaces.core.IContext context, flatfileinterface.proxies.Log logmessage_log)
	{
		if (logmessage_log == null)
			getMendixObject().setValue(context, MemberNames.LogMessage_Log.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.LogMessage_Log.toString(), logmessage_log.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return logMessageMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final flatfileinterface.proxies.LogMessage that = (flatfileinterface.proxies.LogMessage) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static java.lang.String getType()
	{
		return "FlatFileInterface.LogMessage";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public java.lang.String getGUID()
	{
		return "ID_" + getMendixObject().getId().toLong();
	}
}
