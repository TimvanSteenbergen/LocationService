// This file was generated by Mendix Modeler 7.8.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package listutils.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	// These are the microflows for the ListUtils module
	public static java.lang.String concatDistinctNames(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.String)Core.execute(context, "ListUtils.ConcatDistinctNames", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String concatDistinctNames_Native(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.String)Core.execute(context, "ListUtils.ConcatDistinctNames_Native", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String convertToXML(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.String)Core.execute(context, "ListUtils.convertToXML", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long countDistinct(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.Long)Core.execute(context, "ListUtils.CountDistinct", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.Long countDistinct_Native(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.Long)Core.execute(context, "ListUtils.CountDistinct_Native", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> createPersonList(IContext context, java.lang.Long _nrOfRecords)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			params.put("NrOfRecords", _nrOfRecords);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.CreatePersonList", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String distinctNamesWithCount(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.String)Core.execute(context, "ListUtils.DistinctNamesWithCount", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.lang.String distinctNamesWithCount_Native(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			return (java.lang.String)Core.execute(context, "ListUtils.DistinctNamesWithCount_Native", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> headGroupBy(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.HeadGroupBy", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> headGroupBy_Native(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.HeadGroupBy_Native", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static boolean runTest(IContext context)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			return (java.lang.Boolean)Core.execute(context, "ListUtils.RunTest", params);
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> topN(IContext context, java.util.List<listutils.proxies.Person> _personList, java.lang.Long _maxRecords)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			params.put("MaxRecords", _maxRecords);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.TopN", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> topN_Native(IContext context, java.util.List<listutils.proxies.Person> _personList, java.lang.Long _maxRecords)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			params.put("MaxRecords", _maxRecords);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.TopN_Native", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> xPathFilter(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.XPathFilter", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
	public static java.util.List<listutils.proxies.Person> xPathFilter_Native(IContext context, java.util.List<listutils.proxies.Person> _personList)
	{
		try
		{
			Map<java.lang.String, Object> params = new HashMap<java.lang.String, Object>();
			java.util.ArrayList<IMendixObject> listparam_personList = null;
			if (_personList != null)
			{
				listparam_personList = new java.util.ArrayList<IMendixObject>();
				for (listutils.proxies.Person obj : _personList)
					listparam_personList.add(obj.getMendixObject());
			}
			params.put("PersonList", listparam_personList);
			java.util.List<IMendixObject> objs = Core.execute(context, "ListUtils.XPathFilter_Native", params);
			java.util.List<listutils.proxies.Person> result = null;
			if (objs != null)
			{
				result = new java.util.ArrayList<listutils.proxies.Person>();
				for (IMendixObject obj : objs)
					result.add(listutils.proxies.Person.initialize(context, obj));
			}
			return result;
		}
		catch (CoreException e)
		{
			throw new MendixRuntimeException(e);
		}
	}
}